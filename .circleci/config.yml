---
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.3

jobs:
  deps:
    docker:
      - image: udata/circleci:2-alpine
    steps:
      - checkout
      # needed to commit changed *.pip files if needed
      - add_ssh_keys:
          fingerprints:
            - 0f:6a:bf:3e:f5:85:d5:41:ca:77:ef:85:7f:f8:b5:9e
      # FIXME: do we need this? ${CIRCLE_BRANCH} seems ok
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
          - py-cache-v16-{{ arch }}-{{ .Branch }}
          - py-cache-v16-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Create venv and install pip-tools
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install pip-tools
      - run:
          name: Upgrade udata to latest pypi release if tagged release
          command: |
            if [[ $CIRCLE_TAG ]]; then
              # upgrade udata to latest pypi release
              echo "udata" > requirements/udata.in
              echo "tagged release, using udata as content of udata.in"
            else
              echo "not a tagged release, using checked-in udata.in"
            fi
      - run:
          name: Compile python dependencies against udata
          command: |
            source venv/bin/activate
            pip-compile requirements/udata.in --output-file=requirements/udata.pip
            pip-compile requirements/install.in --output-file=requirements/install.pip
            pip-compile requirements/test.in --output-file=requirements/test.pip
            pip-compile requirements/develop.in --output-file=requirements/develop.pip
      - run:
          name: Commit any change in compiled *.pip
          command: |
            echo "here is the git diff after dependencies update:"
            git --no-pager diff
            if [[ $CIRCLE_TAG ]]; then
              echo "This a tag build, do not push changes"
            else
              git config --global user.email "robot@data.gouv.fr"
              git config --global user.name "Circle CI"
              ( \
                git ls-files -m|grep -E "(install|test|develop|udata).pip" \
                && git commit requirements/*.pip -m "[auto] update deps" \
                && git push origin ${CIRCLE_BRANCH} \
              ) || true
            fi
      - persist_to_workspace:
          root: .
          paths:
          - venv

  python:
    docker:
      - image: udata/circleci:2-alpine
      - image: mongo:3.6
      - image: redis:alpine
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install python dependencies
          command: |
            source venv/bin/activate
            pip install --force-reinstall --no-deps -r requirements/udata.in
            pip install -r requirements/udata.pip \
                        -r requirements/install.pip \
                        -r requirements/test.pip \
                        -r requirements/develop.pip
            pip install -e .
      - save_cache:
          key: py-cache-v16-{{ arch }}-{{ .Branch }}
          paths:
          - venv
      - run:
          name: Run tests
          command: |
            source venv/bin/activate
            inv qa test --report
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports/
          destination: reports
      - persist_to_workspace:
          root: .
          paths:
          - venv

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py3
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - run:
          name: patch-package hash
          command: md5sum patches/* > patches.hash
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}-{{ checksum "patches.hash" }}
            - js-cache-{{ arch }}-{{ .Branch }}-{{ checksum "patches.hash" }}
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install NodeJS and dependencies
          command: nvm install && npm install
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}-{{ checksum "patches.hash" }}
          paths:
          - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}-{{ checksum "patches.hash" }}
          paths:
          - node_modules
      - run:
          name: Compile assets
          command: |
            nvm use
            npm run build

      - persist_to_workspace:
          root: .
          paths:
            - udata_front/theme/gouvfr/static


  lighthouse:
    docker:
      - image: cimg/python:3.7.13-browsers
      - image: mongo:3.6
      - image: redis:alpine
    steps:
      - checkout
      - browser-tools/install-chrome
      - attach_workspace:
          at: .
      - run:
          name: Generate udata fixtures
          command: |
            pip install --force-reinstall --no-deps -r requirements/udata.in
            pip install -e .
            udata generate-fixtures
      - run:
          name: Install lighthouse
          command: sudo npm install -g @lhci/cli@0.8.x
      - run:
          name: Prepare udata.cfg file with udata-front plugin
          command: cp .lighthouseci/front-plugin-udata.cfg udata.cfg
      - run:
          name: Run lighthouse
          command: npm run lighthouse
      - store_artifacts:
          path: reports/
          destination: reports

  dist:
    docker:
      - image: udata/circleci:2-alpine
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            # Check long description renders properly
            python setup.py check -m -s
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                inv pydist
            elif [[ "$CIRCLE_BRANCH" == feature/* ]]; then
                # This is a feature branch
                inv pydist -b $CIRCLE_BUILD_NUM+${CIRCLE_BRANCH#*/}
            else
                # This is a simple development build
                inv pydist -b $CIRCLE_BUILD_NUM
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: udata/circleci:2-alpine
    steps:
      - attach_workspace:
          at: .
      - deploy:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

workflows:
  version: 2
  build:
    jobs:
      - deps:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - python:
          requires:
            - deps
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - assets:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lighthouse:
          requires:
            - deps
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - dist:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - master
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
