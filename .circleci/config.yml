---
version: 2.1

parameters:
  publish-branch:
    type: string
    default: "master"
    description: "Branch to publish to PyPI and trigger the Gitlab CI/CD pipeline when pushed to"
  deploy-env:
    type: string
    default: "dev"
    description: "Environment to deploy to"

orbs:
  browser-tools: circleci/browser-tools@1.2.3
  cypress: cypress-io/cypress@3

jobs:

  deps:
    docker:
      - image: udata/circleci:py3.11-bookworm
    steps:
      - checkout
      # needed to commit changed *.pip files if needed
      - add_ssh_keys:
          fingerprints:
            - 0f:6a:bf:3e:f5:85:d5:41:ca:77:ef:85:7f:f8:b5:9e
      - restore_cache:
          keys:
          - py-cache-v16-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Create venv and install pip-tools
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade pip-tools
      - run:
          name: Upgrade udata to latest pypi release if tagged release
          command: |
            if [[ $CIRCLE_TAG ]]; then
              # upgrade udata to latest pypi release
              echo "udata" > requirements/udata.in
              echo "tagged release, using udata as content of udata.in"
            else
              echo "not a tagged release, using checked-in udata.in"
            fi
      - run:
          name: Compile python dependencies against udata
          command: |
            source venv/bin/activate
            pip-compile requirements/udata.in --output-file=requirements/udata.pip
            pip-compile requirements/install.in --output-file=requirements/install.pip
            pip-compile requirements/test.in --output-file=requirements/test.pip
            pip-compile requirements/develop.in --output-file=requirements/develop.pip
      - run:
          name: Commit any change in compiled *.pip
          command: |
            echo "here is the git diff after dependencies update:"
            git --no-pager diff
            if [[ $CIRCLE_TAG ]]; then
              echo "This a tag build, do not push changes"
            else
              git config --global user.email "robot@data.gouv.fr"
              git config --global user.name "Circle CI"
              ( \
                git ls-files -m|grep -E "(install|test|develop|udata).pip" \
                && git commit requirements/*.pip -m "[auto] update deps" \
                && git push origin ${CIRCLE_BRANCH} \
              ) || true
            fi
      - persist_to_workspace:
          root: .
          paths:
          - requirements
          - venv

  python:
    docker:
      - image: udata/circleci:py3.11-bookworm
      - image: mongo:6.0.4
      - image: redis:alpine
    environment:
        BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install python dependencies
          command: |
            source venv/bin/activate
            pip install --force-reinstall --no-deps -r requirements/udata.in
            pip install -r requirements/udata.pip \
                        -r requirements/install.pip \
                        -r requirements/test.pip \
                        -r requirements/develop.pip
            pip install -e .
      - run:
          name: Set buildno var
          command: |
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                echo 'export BUILDNO="'$CIRCLE_TAG'"' >> version.sh
            elif [[ "$CIRCLE_BRANCH" == feature/* ]]; then
                # This is a feature branch
                echo 'export BUILDNO="'$CIRCLE_BUILD_NUM+${CIRCLE_BRANCH#*/}'"' >> version.sh
            else
                # This is a simple development build
                echo 'export BUILDNO="'$CIRCLE_BUILD_NUM'"' >> version.sh
            fi
            source version.sh
            echo $BUILDNO
      - when:
          condition:
            not: << pipeline.git.tag >>
          steps:
            - run:
                name: Generate egg-info
                command: |
                  source venv/bin/activate
                  source version.sh
                  inv egg-info --buildno ${BUILDNO}
      - save_cache:
          key: py-cache-v16-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
          paths:
          - venv
      - run:
          name: Run tests
          command: |
            source venv/bin/activate
            inv qa test --report
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports/
          destination: reports
      - persist_to_workspace:
          root: .
          paths:
          - venv
          - udata_front.egg-info
          - version.sh

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: cimg/python:3.11-node
    resource_class: medium+
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}
            - js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}
          paths:
          - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
          paths:
          - node_modules
      - run:
          name: Compile assets
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - udata_front/theme/gouvfr/static

  udata_front_plugins_helper:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat udata-front-plugins-helper/package.json > helper-js.deps
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "helper-js.deps" }}
            - js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
          working_directory: ./udata-front-plugins-helper
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "helper-js.deps" }}
          paths:
          - udata-front-plugins-helper/node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
          paths:
          - udata-front-plugins-helper/node_modules
      - run:
          name: Compile and test package
          working_directory: ./udata-front-plugins-helper
          command: npm run preversion

  datagouv_components:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat ./udata_front/theme/gouvfr/datagouv-components/package.json > datagouv-components-js.deps
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "datagouv-components-js.deps" }}
            - js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "datagouv-components-js.deps" }}
          paths:
          - ./udata_front/theme/gouvfr/datagouv-components/node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}{{ .Environment.CIRCLE_TAG }}
          paths:
          - ./udata_front/theme/gouvfr/datagouv-components/node_modules
      - run:
          name: Compile and test package
          command: npm run preversion
          working_directory: ./udata_front/theme/gouvfr/datagouv-components

  storybook_datagouv_components:
    docker:
      - image: mcr.microsoft.com/playwright:v1.48.2-jammy
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Build package
          command: npm run build
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Build storybook
          command: npm run build-storybook
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Install udata-front dependencies
          command: npm ci
      - run:
          name: Test storybook
          command: npm run ci:storybook
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Publish to chromatic
          command: CHROMATIC_PROJECT_TOKEN=$CHROMATIC_COMPONENTS_TOKEN npm run chromatic -- --exit-once-uploaded
          working_directory: ./udata_front/theme/gouvfr/datagouv-components

  publish_datagouv_components:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Config npm registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
      - run:
          name: Publish on NPM
          working_directory: ./udata_front/theme/gouvfr/datagouv-components
          command: |
            if [[ $CIRCLE_TAG ]]; then
              # This is a tagged release
              npm run publish-stable
              npm run update-version -- prerelease --preid=dev
              npm run publish-dev
            else
              # This is a simple development build
              # `npm view @datagouv/components@dev version` allows us to get the current `dev` version on the npm registry
              # We set it as the current version
              npm run update-version -- --allow-same-version $(npm view @datagouv/components@dev version)
              # Then, we increment the preprelease version number
              npm run update-version -- prerelease --preid=dev
              npm run publish-dev
            fi

  cypress:
    docker:
      - image: cimg/python:3.11-browsers
      - image: mongo:6.0.4
      - image: redis:alpine
    resource_class: medium+
    steps:
      - checkout
      - cypress/install
      - attach_workspace:
          at: .
      - run:
          name: Install python deps
          command: |
            pip install --force-reinstall --no-deps -r requirements/udata.in
            pip install -e .
      - when:
          condition:
            not: << pipeline.git.tag >>
          steps:
            - run:
                name: Generate egg-info
                command: |
                  source version.sh
                  python setup.py egg_info --tag-build ${BUILDNO}
      - run:
          name: Prepare udata.cfg file with udata-front plugin
          command: cp cypress/udata-front-e2e.cfg.example cypress/udata-front-e2e.cfg
      - run:
          name: add secrets to cypress/udata-front-e2e.cfg
          command: |
            if [ "$CAPTCHETAT_BASE_URL" ]; then
                echo "CAPTCHETAT_CLIENT_ID = '${CAPTCHETAT_CLIENT_ID}'" >> cypress/udata-front-e2e.cfg
                echo "CAPTCHETAT_CLIENT_SECRET = '${CAPTCHETAT_CLIENT_SECRET}'" >> cypress/udata-front-e2e.cfg
                echo "CAPTCHETAT_BASE_URL = '${CAPTCHETAT_BASE_URL}'" >> cypress/udata-front-e2e.cfg
                echo "CAPTCHETAT_OAUTH_BASE_URL = '${CAPTCHETAT_OAUTH_BASE_URL}'" >> cypress/udata-front-e2e.cfg
            fi
      - cypress/run-tests:
          cypress-command: npm run ci

  storybook_udata_front:
    docker:
      - image: mcr.microsoft.com/playwright:v1.48.2-jammy
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install NodeJS and dependencies
          command: npm ci
      - run:
          name: Build package
          command: npm run build
      - run:
          name: Build storybook
          command: npm run build-storybook
      - run:
          name: Test storybook
          command: npm run ci:storybook
      - run:
          name: Publish to chromatic
          command: CHROMATIC_PROJECT_TOKEN=$CHROMATIC_UDATA_FRONT_TOKEN npm run chromatic -- --exit-once-uploaded

  lighthouse:
    docker:
      - image: cimg/python:3.11-browsers
      - image: mongo:6.0.4
      - image: redis:alpine
    steps:
      - checkout
      - browser-tools/install-chrome
      - attach_workspace:
          at: .
      - run:
          name: Prepare udata.cfg file with udata-front plugin
          command: cp .lighthouseci/front-plugin-udata.cfg udata.cfg
      - run:
          name: Generate udata fixtures
          command: |
            pip install --force-reinstall --no-deps -r requirements/udata.in
            pip install -e .
            udata import-fixtures
      - when:
          condition:
            not: << pipeline.git.tag >>
          steps:
            - run:
                name: Generate egg-info
                command: |
                  source version.sh
                  python setup.py egg_info --tag-build ${BUILDNO}

      - run:
          name: Install lighthouse
          command: sudo npm install -g @lhci/cli@0.10.x
      - run:
          name: Run lighthouse
          command: npm run lighthouse
      - store_artifacts:
          path: reports/
          destination: reports

  dist:
    docker:
      - image: udata/circleci:py3.11-bookworm
    environment:
        BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set version
          command: |
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                RELEASE_VERSION=$CIRCLE_TAG
                echo "RELEASE_VERSION=$RELEASE_VERSION" > version.sh
            else
                # Otherwise, relies on a dev version like "1.2.1.dev" by default
                # Read base version from __init__.py
                echo "BASE_VERSION=$(python -c "from udata import __version__; print(__version__)") >> version.sh
                # Build the release version string with the build number, like "1.2.1.dev1234"
                echo "RELEASE_VERSION=${BASE_VERSION}${BUILDNO}" >> version.sh
            fi
      - run:
          name: Display build info for debugging
          command: |
            source version.sh
            echo "Base version from __init__.py: $BASE_VERSION"
            echo "Build number: $BUILDNO"
            echo "Commit hash: ${CIRCLE_SHA1:0:7}"
            echo "Git tag: $CIRCLE_TAG"
            echo "Building a wheel release with version $RELEASE_VERSION"
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            # Check long description renders properly
            python setup.py check -m -s
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                inv pydist
            else
                # This is a simple development build
                source version.sh
                inv pydist -b ${BUILDNO}
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: udata/circleci:py3.11-bookworm
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

  trigger-gitlab-pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Configure the SSH simple-scaffold repository private key
          command: |
            mkdir -p ~/.ssh
            # SCAFFOLD_PRIVATE_KEY is the private key related to the "simple-scaffold" GitLab repository, so that it can be cloned
            # CircleCI doesn't accept multiple lines in a single environment variable, so the multiline private key must be base64 encoded, and then decoded here
            echo "$SCAFFOLD_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - run:
          name: Configure Git
          command: |
            git config --global user.email "root@data.gouv.fr"
            git config --global user.name "datagouv"
      - run:
          name: Clone simple-scaffold repository
          command: |
            git clone --quiet --depth 1 $SCAFFOLD_REPO_SSH_URL scaffold
      - run:
          name: Trigger Gitlab CI/CD pipeline for udata+udata-front to deploy to dev environment
          command: |
            source version.sh
            cd scaffold
            # Run the script that triggers the Gitlab CI/CD pipeline.
            # Must have GITLAB_API_TOKEN set in the environment
            # GITLAB_API_TOKEN is the token related to the "infra" GitLab repository, so that the Gitlab CI/CD pipeline can be triggered
            # The script args are, in order:
            # - udata: the name of the parent project to re-deploy (APP_NAME)
            # - $BUILDNO: the plugin build version to deploy (RELEASE_VERSION)
            # - << pipeline.parameters.deploy-env >>: the environment to deploy to (ENV)
            # - "plugin_name=udata-front": the deploy variables (VARS). They are passed as a quoted string in which the variables are separated by semicolons.
            ./scripts/gitlab-ci-pipeline.sh udata ${BUILDNO} << pipeline.parameters.deploy-env >> "plugin_name=udata-front"

workflows:
  build:
    jobs:
      - deps:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - python:
          requires:
            - deps
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - assets:
          requires:
            - python
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - storybook_udata_front:
          requires:
            - assets
      - udata_front_plugins_helper:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - datagouv_components:
          filters:
            tags:
              only: /@datagouv\/components@([0-9]+(?:\.[0-9]+)*(?:-(?:a|b|dev|rc)\.[0-9]+)?)/
      - storybook_datagouv_components:
          requires:
            - datagouv_components
          filters:
            tags:
              only: /@datagouv\/components@([0-9]+(?:\.[0-9]+)*(?:-(?:a|b|dev|rc)\.[0-9]+)?)/
      - publish_datagouv_components:
          requires:
            - storybook_datagouv_components
          filters:
            branches:
              only:
                - master
            tags:
              only: /@datagouv\/components@([0-9]+(?:\.[0-9]+)*(?:-(?:a|b|dev|rc)\.[0-9]+)?)/
          context: org-global
      - cypress:
          requires:
            - deps
            - assets
            - python
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - lighthouse:
          requires:
            - deps
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - dist:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\.(a|b|rc)[0-9]*)*/
          context: org-global
      - trigger-gitlab-pipeline:
          requires:
            - publish
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
