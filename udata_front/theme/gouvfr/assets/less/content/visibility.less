/*
---
name: Visibility
category: 2 - Content
---

## Hiding things

Sometimes you need to hide some elements, mostly while doing some responsive rules. You can use `.hidden-{breakpoint}` and `.visible-{breakpoint}` to do so.

```visibility.html
<div class="fr-container--fluid">
    <div class="fr-grid-row">
        <div class="fr-col bg-blue-300">Always Visible</div>
        <div class="fr-col bg-blue-300 hidden-sm">Hidden on mobile</div>
    </div>
    <div class="fr-grid-row">
        <div class="fr-col bg-blue-300 hidden">Always hidden</div>
        <div class="fr-col bg-orange-100 hidden visible-sm">Visible on mobile</div>
    </div>
</div>
```

## Visually hidden

Sometimes you need to show some elements only to assistive technologies (like screen readers). You can use `.visually-hidden` to do so.
It was previously called `.sr-only` in CSS frameworks so the name is still often used.
Because `.visually-hidden` is in `position: absolute`, it'll be placed based on the same rules as other `position: absolute`.
This can cause some strange behavior with flex no-wrap.

```visually-hidden.html
<span class="visually-hidden">Some details for screen readers and other assistive technologies.</span>
```
*/

.hidden {
    display: none !important;
}

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    white-space: nowrap; /* added line */
    border: 0;
}

each(@breakpoints, .(@bk, @_k, @_i) {
    @var: 'query-@{bk}';

    @media @@var {
        .hidden-@{bk} {
            display: none!important;
        }

        .visible-@{bk} {
            display: inherit!important;
        }
    }
});

each(@dsfr-breakpoints, .(@bk, @_k, @_i) {
    @var: 'dsfr-query-@{bk}';

    @media @@var {
        .inline-@{bk} {
            display: inline!important;
        }
    }
    @media @@var {
        .flex-@{bk} {
            display: flex!important;
        }
    }
});

.z-2 {
    z-index: 2 !important;
}

.overflow-visible {
    overflow: visible;
}
